import { Injectable } from '@nestjs/common';
import { Beneficiary } from '@prisma/client';
import { BaseRepository } from './base.repository';
import { PrismaService } from '../prisma/prisma.service';
import { CreateBeneficiaryDto, UpdateBeneficiaryDto, PaginationDto } from '../common/validators/zod-schemas';
import { PaginatedResponseDto } from '../common/dto/base.dto';

@Injectable()
export class BeneficiaryRepository extends BaseRepository<Beneficiary, CreateBeneficiaryDto, UpdateBeneficiaryDto> {
  constructor(prisma: PrismaService) {
    super(prisma);
  }

  async create(data: CreateBeneficiaryDto, userId: string): Promise<Beneficiary> {
    return this.prisma.beneficiary.create({
      data: {
        ...data,
        userId,
      },
    });
  }

  async findById(id: string, userId?: string): Promise<Beneficiary | null> {
    const where: any = { id };
    if (userId) {
      where.userId = userId;
    }

    return this.prisma.beneficiary.findUnique({
      where,
      include: {
        willBeneficiaries: {
          include: { will: true },
        },
      },
    });
  }

  async update(id: string, data: UpdateBeneficiaryDto, userId?: string): Promise<Beneficiary> {
    const where: any = { id };
    if (userId) {
      where.userId = userId;
    }

    return this.prisma.beneficiary.update({
      where,
      data,
    });
  }

  async delete(id: string, userId?: string): Promise<void> {
    const where: any = { id };
    if (userId) {
      where.userId = userId;
    }

    await this.prisma.beneficiary.delete({ where });
  }

  async findMany(
    pagination: PaginationDto,
    userId?: string,
    filters?: Record<string, any>
  ): Promise<PaginatedResponseDto<Beneficiary>> {
    const query = this.buildPaginationQuery(pagination);
    
    const where: any = {};
    if (userId) {
      where.userId = userId;
    }
    if (filters) {
      Object.assign(where, filters);
    }
    
    query.where = where;
    query.include = {
      willBeneficiaries: {
        include: { will: true },
      },
    };

    const beneficiaries = await this.prisma.beneficiary.findMany(query);
    return this.buildPaginatedResponse(beneficiaries, pagination);
  }

  async findByEmailHmac(emailHmac: string, userId?: string): Promise<Beneficiary | null> {
    const where: any = { emailHmac };
    if (userId) {
      where.userId = userId;
    }

    return this.prisma.beneficiary.findFirst({ where });
  }

  async updateVerificationStatus(id: string, isVerified: boolean, userId?: string): Promise<Beneficiary> {
    const where: any = { id };
    if (userId) {
      where.userId = userId;
    }

    return this.prisma.beneficiary.update({
      where,
      data: {
        isVerified,
        verificationToken: null,
        verificationExpiresAt: null,
      },
    });
  }
}
