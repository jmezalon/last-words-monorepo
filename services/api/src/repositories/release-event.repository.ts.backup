import { Injectable } from '@nestjs/common';
import { ReleaseEvent } from '@prisma/client';
import { BaseRepository } from './base.repository';
import { PrismaService } from '../prisma/prisma.service';
import { CreateReleaseEventDto, PaginationDto } from '../common/validators/zod-schemas';
import { PaginatedResponseDto } from '../common/dto/base.dto';

@Injectable()
export class ReleaseEventRepository extends BaseRepository<ReleaseEvent, CreateReleaseEventDto, never> {
  constructor(prisma: PrismaService) {
    super(prisma);
  }

  async create(data: CreateReleaseEventDto): Promise<ReleaseEvent> {
    return this.prisma.releaseEvent.create({
      data,
      include: {
        will: true,
        beneficiary: true,
      },
    });
  }

  async findById(id: string, userId?: string): Promise<ReleaseEvent | null> {
    const include: any = {
      will: true,
      beneficiary: true,
    };

    // Filter by user ownership if provided
    if (userId) {
      include.will = { where: { userId } };
    }

    return this.prisma.releaseEvent.findFirst({
      where: { id },
      include,
    });
  }

  // Release events are immutable after creation
  async update(): Promise<never> {
    throw new Error('Release events cannot be updated after creation');
  }

  async delete(): Promise<never> {
    throw new Error('Release events cannot be deleted');
  }

  async findMany(
    pagination: PaginationDto,
    userId?: string,
    filters?: Record<string, any>
  ): Promise<PaginatedResponseDto<ReleaseEvent>> {
    const query = this.buildPaginationQuery(pagination);
    
    const where: any = {};
    if (filters) {
      Object.assign(where, filters);
    }

    // Filter by user ownership through will
    if (userId) {
      where.will = { userId };
    }
    
    query.where = where;
    query.include = {
      will: true,
      beneficiary: true,
    };

    const events = await this.prisma.releaseEvent.findMany(query);
    return this.buildPaginatedResponse(events, pagination);
  }

  async findByWillId(willId: string, userId?: string): Promise<ReleaseEvent[]> {
    const where: any = { willId };
    
    // Verify user owns the will
    if (userId) {
      const will = await this.prisma.will.findFirst({
        where: { id: willId, userId },
      });
      if (!will) {
        throw new Error('Will not found or access denied');
      }
    }

    return this.prisma.releaseEvent.findMany({
      where,
      include: {
        will: true,
        beneficiary: true,
      },
      orderBy: { createdAt: 'desc' },
    });
  }

  async findPendingEvents(): Promise<ReleaseEvent[]> {
    return this.prisma.releaseEvent.findMany({
      where: { status: 'PENDING' },
      include: {
        will: true,
        beneficiary: true,
      },
      orderBy: { createdAt: 'asc' },
    });
  }

  async updateStatus(id: string, status: string, approvedBy?: string): Promise<ReleaseEvent> {
    const updateData: any = { status };
    
    if (status === 'COMPLETED') {
      updateData.processedAt = new Date();
    }
    
    if (approvedBy) {
      updateData.approvedBy = approvedBy;
      updateData.approvedAt = new Date();
    }

    return this.prisma.releaseEvent.update({
      where: { id },
      data: updateData,
      include: {
        will: true,
        beneficiary: true,
      },
    });
  }

  async findByEventType(eventType: string, userId?: string): Promise<ReleaseEvent[]> {
    const where: any = { eventType };
    
    if (userId) {
      where.will = { userId };
    }

    return this.prisma.releaseEvent.findMany({
      where,
      include: {
        will: true,
        beneficiary: true,
      },
      orderBy: { createdAt: 'desc' },
    });
  }
}
