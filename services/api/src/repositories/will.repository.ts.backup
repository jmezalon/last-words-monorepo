import { Injectable } from '@nestjs/common';
import { Will } from '@prisma/client';
import { BaseRepository } from './base.repository';
import { PrismaService } from '../prisma/prisma.service';
import { CreateWillDto, UpdateWillDto, PaginationDto } from '../common/validators/zod-schemas';
import { PaginatedResponseDto } from '../common/dto/base.dto';

@Injectable()
export class WillRepository extends BaseRepository<Will, CreateWillDto, UpdateWillDto> {
  constructor(prisma: PrismaService) {
    super(prisma);
  }

  async create(data: CreateWillDto, userId: string): Promise<Will> {
    return this.prisma.will.create({
      data: {
        ...data,
        userId,
      },
    });
  }

  async findById(id: string, userId?: string): Promise<Will | null> {
    const where: any = { id };
    if (userId) {
      where.userId = userId;
    }

    return this.prisma.will.findUnique({
      where,
      include: {
        secrets: true,
        willBeneficiaries: {
          include: {
            beneficiary: true,
          },
        },
      },
    });
  }

  async update(id: string, data: UpdateWillDto, userId?: string): Promise<Will> {
    const where: any = { id };
    if (userId) {
      where.userId = userId;
    }

    return this.prisma.will.update({
      where,
      data: {
        ...data,
        contentVersion: { increment: 1 },
      },
    });
  }

  async delete(id: string, userId?: string): Promise<void> {
    const where: any = { id };
    if (userId) {
      where.userId = userId;
    }

    await this.prisma.will.delete({ where });
  }

  async findMany(
    pagination: PaginationDto,
    userId?: string,
    filters?: Record<string, any>
  ): Promise<PaginatedResponseDto<Will>> {
    const query = this.buildPaginationQuery(pagination);
    
    const where: any = {};
    if (userId) {
      where.userId = userId;
    }
    if (filters) {
      Object.assign(where, filters);
    }
    
    query.where = where;
    query.include = {
      secrets: { where: { isActive: true } },
      willBeneficiaries: {
        include: { beneficiary: true },
      },
    };

    const wills = await this.prisma.will.findMany(query);
    return this.buildPaginatedResponse(wills, pagination);
  }

  async findByStatus(status: string, userId?: string): Promise<Will[]> {
    const where: any = { status };
    if (userId) {
      where.userId = userId;
    }

    return this.prisma.will.findMany({
      where,
      include: {
        secrets: true,
        willBeneficiaries: {
          include: { beneficiary: true },
        },
      },
    });
  }

  async updateStatus(id: string, status: string, userId?: string): Promise<Will> {
    const where: any = { id };
    if (userId) {
      where.userId = userId;
    }

    const updateData: any = { status };
    if (status === 'RELEASED') {
      updateData.releasedAt = new Date();
    }

    return this.prisma.will.update({
      where,
      data: updateData,
    });
  }
}
